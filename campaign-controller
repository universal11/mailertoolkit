#!/usr/bin/env node
var Program = require("commander");
var FileSystem = require("fs");
var TemplateBuilder = require("./classes/TemplateBuilder.js");
var ListDispenser = require("./classes/ListDispenser.js");

var MASTER_TEMPLATE_TO_CLONE = "MASTER_TEMPLATE_TO_CLONE";
//var CAMPAIGNS_DIRECTORY = "campaigns";
var CAMPAIGNS_DIRECTORY = "/home/mmartinez/scripts/mailertoolkit/campaigns";

function additionalHelp(){
	console.log("Additional help...");
}

function parseLists(data){
	var listMap = data.split(",");

}

function parseSenderDomains(domains){
	return domains.split(",");
}

function parseAccountIDList(accountIDList){
	return accountIDList.split(",");
}

function copyFileToPool(poolPath, filePath){
	FileSystem.readFile(filePath, function(error, data){
		if(error){
			console.log(error);
		}

		FileSystem.writeFile(poolPath, data, function(error){
			if(error){
				console.log(error);
			}
		});

	});
}


function loadPool(poolDirectory, inputPath){
	//var poolDirectory = poolDirectory;
	FileSystem.exists(poolDirectory, function(exists){
		if(!exists){
			FileSystem.mkdir(poolDirectory, function(error){
				if(error){
					console.log(error);
				}
			});
		}

		FileSystem.readdir(inputPath, function(error, files){
			var numberOfFiles = files.length;
			for(var i=0; i < numberOfFiles; i++){
				var file = files[i];
				loadPoolBatch(poolDirectory + "/" + file, inputPath + "/" + file);
				//copyFileToPool(poolDirectory + "/" + file, inputPath + "/" + file);
			}
		});


	});
}

function loadPoolBatch(batchDirectory, inputPath){
	FileSystem.exists(batchDirectory, function(exists){
		if(!exists){
			FileSystem.mkdir(batchDirectory, function(error){
				if(error){
					console.log(error);
				}
			});
		}

		FileSystem.readdir(inputPath, function(error, files){
			var numberOfFiles = files.length;
			for(var i=0; i < numberOfFiles; i++){
				var file = files[i];
				copyFileToPool(batchDirectory + "/" + file, inputPath + "/" + file);
			}
		});


	});
}

function buildSend(options, debugMode){
	//if(option.wait_time < 5){ option.wait_time = 5; }
	var campaignTemplateDirectory = CAMPAIGNS_DIRECTORY + "/" + options.provider + "/" + options.campaign + "/templates";
	//var sendTimeStamp = new Date().getTime();
	//var templateFile = campaignTemplateDirectory + "/send";
	//FileSystem.readFile(campaignTemplateDirectory + "/master", function(error, data){
		//FileSystem.writeFile(templateFile, TemplateBuilder.build(data.toString(), options.from_domain), function(error){
			//if(error){
				//console.log(error);
			//}
			//console.log("Generated template: " + templateFile);
	var poolDirectory = CAMPAIGNS_DIRECTORY + "/" + options.provider + "/" + options.campaign + "/pool";
	FileSystem.readdir(poolDirectory, function(error, parts){
		if(error){
			console.log(error);
		}
		else{
			if(parts.length > 0){
				var senderDomains = options.sender_domains;
				var accountIDs = options.account_ids;
				var waitTime = (60000 * options.wait_time);
				var partsCount = parts.length;
				for(var i=0; i < partsCount; i++){
					var poolPart = parts[i];
					prepareBatchCommand(poolPart, poolDirectory, options.provider, campaignTemplateDirectory, senderDomains[0], options.accounts_file, accountIDs[0], waitTime, options.bitly_domain, debugMode);
					waitTime += (60000 * options.wait_time);
					senderDomains.splice(0,1);
					accountIDs.splice(0,1);
				}
				
			}
		}
		
		

		

	});

		//});
	//});
	

	
	
	//ListDispenser.dispense(inputPath, options.output_path, options.count);
	//FileSystem.readdir();
}

function shortenUrl(url){
	
}


function prepareBatchCommand(poolPart, poolDirectory, provider, campaignTemplateDirectory, senderDomain, accountsFile, accountId, waitTime, debugMode, bitlyDomain){
	if(debugMode == undefined){ debugMode = 0; }
	var poolPartDirectory = poolDirectory + "/" + poolPart;
	var currentUnixTimestamp = new Date().getTime();
	var templateFile = campaignTemplateDirectory + "/send-" + accountId;
	var generatedAccountsFile = "/etc/pmta/marc-auto-rly-" + accountId;

	var selectAccountsCommand = "/scripts/rly-cutter.sh " + accountsFile + " " + accountId + " 250 | sudo tee " + generatedAccountsFile;
	//var accountsFile = campaignTemplateDirectory + "/accounts-" + sendTimeStamp;

	var Bitly = require('bitly');
	var bitly = new Bitly("ironman82", 'R_3a4f440da2404569a7d3cc6579abcaab');
	bitly.shorten("http://" + bitlyDomain + "/?" + currentUnixTimestamp + "#", function(err, response) {
	  if (err) throw err;

	  // See http://code.google.com/p/bitly-api/wiki/ApiDocumentation for format of returned object
	  var shortURL = response.data.url

	  // Do something with data

	  console.log(shortURL);

	  FileSystem.readdir(poolPartDirectory, function(error, files){
			if(error){
				console.log(error);
			}
			
			var batchCommand = "";

			switch(provider){
				case "optonline":
					batchCommand = "/opt/feeder/bin/ybiz-batch.pl " + templateFile + " -q ool.queue -c " + generatedAccountsFile + " -m 100 -a 100 -v 0 -r 90 -d 2 -t ghostsandthings@optonline.net -w Y -e 4 -n 1 -sids " + files.join(",") + " -auto " + poolPartDirectory + "/" + files.join(" " + poolPartDirectory + "/");
					break;
				case "roadrunner":
					batchCommand = "/opt/feeder/bin/ybiz-batch.pl " + templateFile + " -q rr.queue -c " + generatedAccountsFile + " -m 100 -a 100 -v 0 -r 90 -d 2 -t alligatoratemyac@roadrunner.com -w Y -e 4 -n 1 -sids " + files.join(",") + " -auto " + poolPartDirectory + "/" + files.join(" " + poolPartDirectory + "/");
					break;
				default:
					break;
			}

			var Process = require("child_process").exec;

			Process(selectAccountsCommand, function(error, output){
				if(error){
					console.log(error);
				}
				console.log(output);
			});

			if(!debugMode){
				setTimeout(function() {
					

					FileSystem.readFile(campaignTemplateDirectory + "/master", function(error, data){
						FileSystem.writeFile(templateFile, TemplateBuilder.build(data.toString(), senderDomain, bitlyDomain), function(error){
							if(error){
								console.log(error);
							}
							console.log("Generated template: " + templateFile);
							Process(batchCommand, function(error, output){
								if(error){
									console.log(error);
								}
								console.log(output);
							});
						});
					});

				  	console.log("# # # # # # # # # # #");
					console.log("# Batch Command: Sender - " + senderDomain);
					console.log("# # # # # # # # # # #");
					console.log(batchCommand);
					console.log("# Select Accounts Command:");
					console.log(selectAccountsCommand);
				}, waitTime);
			}
			else{
				console.log("# # # # # # # # # # #");
				console.log("# Batch Command: Sender - " + senderDomain);
				console.log("# # # # # # # # # # #");
				console.log(batchCommand);
				console.log("# Select Accounts Command:");
				console.log(selectAccountsCommand);
			}
			

			

			/*
			var process = require("child_process").exec;
			process("rm -rf " + poolPartDirectory, function(error, output){
				if(error){
					console.log(error);
				}
				console.log(output);
				console.log("Removed: " + poolPartDirectory);
			});

			*/
			/*
			process("/scripts/rly-cutter.sh " + options.accounts_file + " " + options.account_id + " 250 | sudo tee " + accountsFile, function(error, output){
				if(error){
					console.log(error);
				}
				console.log(output);
				console.log("Generated accounts file.");

			});
			*/

		});
	});

	

	
}



Program
	.version("1.0.0")
	//.option("-o, --output_path <path>", "Output Path")
	//.option("-i, --input_path <path>", "Input Path")
	

Program
	.command("build")
	.description("Builds a batch from pool")
	.option("-v, --provider <value>", "Domain name. Example: verizon, hotmail, roadrunner, aol, etc")
	.option("-c, --campaign <value>", "Campaign name. Example: oilcouponcpc, autopricefinder, etc")
	.option("-a, --account_ids <value>", "Account ID List", parseAccountIDList)
	.option("-r, --accounts_file <value>", "Account File")
	.option("-s, --sender_domains <value>", "Sender domains. Example: mails.com,google.com,china.com", parseSenderDomains)
	.option("-w, --wait_time <value>", "Wait time in minutes.")
	.option("-b, --bitly_domain <value>", "Bitly redirect domain")
	.action(function(options){
		buildSend(options, 1);
	});

Program
	.command("send")
	.description("Builds a batch from pool")
	.option("-v, --provider <value>", "Domain name. Example: verizon, hotmail, roadrunner, aol, etc")
	.option("-c, --campaign <value>", "Campaign name. Example: oilcouponcpc, autopricefinder, etc")
	.option("-a, --account_ids <value>", "Account ID List", parseAccountIDList)
	.option("-r, --accounts_file <value>", "Account File")
	.option("-s, --sender_domains <value>", "Sender domains. Example: mails.com,google.com,china.com", parseSenderDomains)
	.option("-w, --wait_time <value>", "Wait time in minutes.")
	.option("-b, --bitly_domain <value>", "Bitly redirect domain")
	.action(function(options){
		buildSend(options, 0);
	});

Program
	.command("edit")
	.description("Edit campaign template:")
	.option("-v, --provider <value>", "Domain name. Example: verizon, hotmail, roadrunner, aol, etc")
	.option("-c, --campaign <value>", "Campaign name. Example: oilcouponcpc, autopricefinder, etc")
	.action(function(options){
		console.log("Edit Template:");
		console.log(CAMPAIGNS_DIRECTORY + "/" + options.provider + "/" + options.campaign + "/templates/master");
		//ListDispenser.dispense(inputPath, options.output_path, options.count);
	});

Program
	.command("loadpool")
	.description("Load campaign lists")
	.option("-v, --provider <value>", "Domain name. Example: verizon, hotmail, roadrunner, aol, etc")
	.option("-c, --campaign <value>", "Campaign name. Example: oilcouponcpc, autopricefinder, etc")
	.action(function(env,options){
		var poolDirectory = CAMPAIGNS_DIRECTORY + "/" + options.provider + "/" + options.campaign + "/pool";
		loadPool(poolDirectory, env);
		/*
		FileSystem.exists(poolDirectory, function(exists){
			if(!exists){
				FileSystem.mkdir(poolDirectory, function(error){
					if(error){
						console.log(error);
					}
				});
			}

			FileSystem.readdir(options.input_path, function(error, files){
				var numberOfFiles = files.length;
				for(var i=0; i < numberOfFiles; i++){
					var file = files[i];
					copyFileToPool(poolDirectory + "/" + file, options.input_path + "/" + file);
				}
			});


		});
		*/	
		//ListDispenser.dispense(inputPath, options.output_path, options.count);
	});


Program
	.command("create")
	.description("Deploys a new campaign for a specified domain.")
	.option("-v, --provider <value>", "Domain name. Example: verizon, hotmail, roadrunner, aol, etc")
	.option("-c, --campaign <value>", "Campaign name. Example: oilcouponcpc, autopricefinder, etc")
	.option("-t, --template <path>", "Template that will be used to clone from")
	.action(function(options){
		//ListDispenser.dispense(inputPath, options.output_path, options.count);
		console.log("Creating...");
		console.log("Domain:" + options.provider);
		console.log("Campaign: " + options.campaign);
		console.log("using Template: " + options.template);

		FileSystem.readFile(options.template, function(error, data){
			console.log("Loaded: " + options.template);
			if(!error){
				var campaignDomainDirectory = CAMPAIGNS_DIRECTORY + "/" + options.provider;

				FileSystem.mkdir(campaignDomainDirectory, function(error){
					if(error){
						console.log(error);
					}

					var campaignDirectory = campaignDomainDirectory + "/" + options.campaign;
					FileSystem.mkdir(campaignDirectory, function(error){
						if(error){
							console.log(error);
						}
						else{
							console.log("Created: " + campaignDirectory);
						}

						var campaignMasterTemplateDirectory = campaignDirectory + "/templates";
						FileSystem.mkdir(campaignMasterTemplateDirectory, function(event){
							if(error){
								console.log(error);
							}
							else{
								console.log("Created: " + campaignMasterTemplateDirectory);
							}
						});

						FileSystem.writeFile(campaignMasterTemplateDirectory + "/master", data, function(error){
								if(error){
									console.log(error);
								}
								
								console.log("Complete.");
								console.log("Edit Campaign Template: " + campaignMasterTemplateDirectory + "/master");
							});
					});
				});

				
			}

		});
		
	});

Program
	.command("*")
	.description("Runs main")
	.action(function(env, data){

	});

Program.on("--help", additionalHelp);

Program.parse(process.argv);
