#!/usr/bin/env node
var Program = require("commander");
var FileSystem = require("fs");
var TemplateBuilder = require("./classes/TemplateBuilder.js");
var ListDispenser = require("./classes/ListDispenser.js");

var MASTER_TEMPLATE_TO_CLONE = "MASTER_TEMPLATE_TO_CLONE";
//var CAMPAIGNS_DIRECTORY = "campaigns";
var CAMPAIGNS_DIRECTORY = "/home/mmartinez/scripts/mailertoolkit/campaigns";

function additionalHelp(){
	console.log("Additional help...");
}

function parseLists(data){
	var listMap = data.split(",");

}

function parseSenderDomains(domains){
	return domains.split(",");
}


function prepareBatchCommand(poolPart, poolDirectory, provider, templateFile, senderDomain, waitTime){
	var poolPartDirectory = poolDirectory + "/" + poolPart;
	//var accountsFile = campaignTemplateDirectory + "/accounts-" + sendTimeStamp;
	FileSystem.readdir(poolPartDirectory, function(error, files){
		if(error){
			console.log(error);
		}
		
		var batchCommand = "";

		switch(provider){
			case "optonline":
				batchCommand = "/opt/feeder/bin/ybiz-batch.pl " + templateFile + " -q ool.queue -c /etc/pmta/yrly-250-OOL-MARC-PART-1 -m 100 -a 100 -v 0 -r 90 -d 2 -t ghostsandthings@optonline.net -w Y -e 4 -n 1 -sids " + files.join(",") + " -auto " + poolPartDirectory + "/" + files.join(" " + poolPartDirectory + "/");
				break;
			case "roadrunner":
				batchCommand = "/opt/feeder/bin/ybiz-batch.pl " + templateFile + " -q rr.queue -c /etc/pmta/yrly-250-RR-MARC-PART-1 -m 100 -a 100 -v 0 -r 90 -d 2 -t alligatoratemyac@roadrunner.com -w Y -e 4 -n 1 -sids " + files.join(",") + " -auto " + poolPartDirectory + "/" + files.join(" " + poolPartDirectory + "/");
				break;
			default:
				break;
		}

		setTimeout(function() {
		  	console.log("# # # # # # # # # # #");
			console.log("# Batch Command: Sender - " + senderDomain);
			console.log("# # # # # # # # # # #");
			console.log(batchCommand);
		}, waitTime);

		

		/*
		var process = require("child_process").exec;
		process("rm -rf " + poolPartDirectory, function(error, output){
			if(error){
				console.log(error);
			}
			console.log(output);
			console.log("Removed: " + poolPartDirectory);
		});

		*/
		/*
		process("/scripts/rly-cutter.sh " + options.accounts_file + " " + options.account_id + " 250 | sudo tee " + accountsFile, function(error, output){
			if(error){
				console.log(error);
			}
			console.log(output);
			console.log("Generated accounts file.");

		});
		*/

	});
}



Program
	.version("1.0.0")
	//.option("-o, --output_path <path>", "Output Path")
	//.option("-i, --input_path <path>", "Input Path")
	

Program
	.command("build")
	.description("Builds a batch from pool")
	.option("-v, --provider <value>", "Domain name. Example: verizon, hotmail, roadrunner, aol, etc")
	.option("-c, --campaign <value>", "Campaign name. Example: oilcouponcpc, autopricefinder, etc")
	.option("-f, --from_domain <value>", "From Domain: mariolovesmushrooms.com, google.com, etc")
	.option("-a, --account_id <value>", "Account ID")
	.option("-r, --accounts file <value>", "Account File")
	.option("-s, --sender_domains <value>", "Sender domains. Example: mariolovesmushrooms.com, google.com, etc", parseSenderDomains)
	.action(function(options){
		var campaignTemplateDirectory = CAMPAIGNS_DIRECTORY + "/" + options.provider + "/" + options.campaign + "/templates";
		var sendTimeStamp = new Date().getTime();
		var templateFile = campaignTemplateDirectory + "/send";
		FileSystem.readFile(campaignTemplateDirectory + "/master", function(error, data){
			FileSystem.writeFile(templateFile, TemplateBuilder.build(data.toString(), options.from_domain), function(error){
				if(error){
					console.log(error);
				}
				//console.log("Generated template: " + templateFile);
				var poolDirectory = CAMPAIGNS_DIRECTORY + "/" + options.provider + "/" + options.campaign + "/pool";
				FileSystem.readdir(poolDirectory, function(error, parts){
					if(error){
						console.log(error);
					}
					else{
						if(parts.length > 0){
							var senderDomains = options.sender_domains;
							var waitTime = (60000 * 2);
							var partsCount = parts.length;
							for(var i=0; i < partsCount; i++){
								var poolPart = parts[i];
								prepareBatchCommand(poolPart, poolDirectory, options.provider, templateFile, senderDomains[0], waitTime);
								waitTime += (60000 * 2);
								senderDomains.splice(0,1);
							}
							
						}
					}
					
					

					

				});

			});
		});
		

		
		
		//ListDispenser.dispense(inputPath, options.output_path, options.count);
		//FileSystem.readdir();
	});

Program
	.command("edit")
	.description("Edit campaign template:")
	.option("-v, --provider <value>", "Domain name. Example: verizon, hotmail, roadrunner, aol, etc")
	.option("-c, --campaign <value>", "Campaign name. Example: oilcouponcpc, autopricefinder, etc")
	.action(function(options){
		console.log("Edit Template:");
		console.log(CAMPAIGNS_DIRECTORY + "/" + options.provider + "/" + options.campaign + "/templates/master");
		//ListDispenser.dispense(inputPath, options.output_path, options.count);
	});

Program
	.command("load-list-pool")
	.description("Load campaign lists")
	.option("-v, --provider <value>", "Domain name. Example: verizon, hotmail, roadrunner, aol, etc")
	.option("-c, --campaign <value>", "Campaign name. Example: oilcouponcpc, autopricefinder, etc")
	.option("-p, --pool <name>", "Pool name. Example: harvest, prime, etc")
	.option("-l, --cids <name:id>", "Lists with ID. Example: LIST1:1234,LIST2:5678,4567:LIST3", parseLists)
	.action(function(env, options){
		var poolDirectory = CAMPAIGNS_DIRECTORY + "/" + options.provider + "/" + options.campaign + "/" + options.pool;
		FileSystem.exists(poolDirectory, function(exists){
			if(!exists){
				FileSystem.mkdir(poolDirectory, function(error){
					if(error){
						console.log(error);
					}
				});
			}



		});
		//ListDispenser.dispense(inputPath, options.output_path, options.count);
	});


Program
	.command("create")
	.description("Deploys a new campaign for a specified domain.")
	.option("-v, --provider <value>", "Domain name. Example: verizon, hotmail, roadrunner, aol, etc")
	.option("-c, --campaign <value>", "Campaign name. Example: oilcouponcpc, autopricefinder, etc")
	.option("-t, --template <path>", "Template that will be used to clone from")
	.action(function(options){
		//ListDispenser.dispense(inputPath, options.output_path, options.count);
		console.log("Creating...");
		console.log("Domain:" + options.provider);
		console.log("Campaign: " + options.campaign);
		console.log("using Template: " + options.template);

		FileSystem.readFile(options.template, function(error, data){
			console.log("Loaded: " + options.template);
			if(!error){
				var campaignDomainDirectory = CAMPAIGNS_DIRECTORY + "/" + options.provider;

				FileSystem.mkdir(campaignDomainDirectory, function(error){
					if(error){
						console.log(error);
					}

					var campaignDirectory = campaignDomainDirectory + "/" + options.campaign;
					FileSystem.mkdir(campaignDirectory, function(error){
						if(error){
							console.log(error);
						}
						else{
							console.log("Created: " + campaignDirectory);
						}

						var campaignMasterTemplateDirectory = campaignDirectory + "/templates";
						FileSystem.mkdir(campaignMasterTemplateDirectory, function(event){
							if(error){
								console.log(error);
							}
							else{
								console.log("Created: " + campaignMasterTemplateDirectory);
							}
						});

						FileSystem.writeFile(campaignMasterTemplateDirectory + "/master", data, function(error){
								if(error){
									console.log(error);
								}
								
								console.log("Complete.");
								console.log("Edit Campaign Template: " + campaignMasterTemplateDirectory + "/master");
							});
					});
				});

				
			}

		});
		
	});

Program
	.command("*")
	.description("Runs main")
	.action(function(env, data){

	});

Program.on("--help", additionalHelp);

Program.parse(process.argv);
